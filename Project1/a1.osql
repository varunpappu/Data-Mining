/*-*-sql-*-*******************************************************************
 * AmosMiner
 *
 * Author: UDBL members
 * $RCSfile: a1.osql,v $
 * $Revision: 1.24 $ $Date: 2013/11/18 16:48:13 $
 * $State: Exp $ $Locker:  $
 *
 * Description: Data preprocessing, analysis, and normalization
 *              K-nearest classifier tuning and classification (1DL360)
 *
 ****************************************************************************/

/*****************************************************************************
STUDENT TO DO: Do cut-and-paste for a gentle introduction to KNN Classification
******************************************************************************/

/*****************************************************************************
1. DEFINITION OF STORED FUNCTIONS (DATA TABLES)
A stored function stores data physically in the database as e.g. in a table
******************************************************************************/

create function known_glass_data(Number cid) -> Bag of Vector of Number 
   /* Function to store for each glass type cid the sets of samples of 
      known value vectors, i.e. training data per glass class */
  as stored;

create function all_known_glass_data() -> Bag of Vector of Number
  /* Function returning all the samples in the training dataset.
     Notice that the class identifier is excluded in this data. */
  as select ww
     from Vector of Number ww, Number cid
     where ww in known_glass_data(cid);

create function normalized_known_glass_data(Number cid) 
                                          -> Bag of Vector of Number
   /* Function to store normalized training data per class */
  as stored;

create function unknown_glass_data() -> Bag of vector of number
   /* Function to store data to be classified */
  as stored;

create function normalized_unknown_glass_data() -> Bag of Vector of Number
   /* Function to store normalized version of data to be classified */
  as stored;

create function classified_glass_data(Number cid)-> Bag of Vector of Number 
   /* Function to store for each class identifier cid the value vectors of the 
      objects classified to belong to that class */
  as stored;

/*****************************************************************************
2. DATA PREPROCESSING
******************************************************************************/

/* The temporary variable :cidpos holds the vector index of the class 
   identifier in each row of the training dataset */

set :cidpos = 9;

/* The vector :valpos holds the vector indexes of the attribute value vector
   in each row of the training dataset. */

set :valpos = {0,1,2,3,4,5,6,7,8};

/* Split the information in glassdata.nt into feature vector and class id */

set known_glass_data(project(row, {:cidpos})[0]) = project(row, :valpos)
  from Vector of Number row
  where row in read_ntuples("data/glassdata.nt");

/* Get training set size */
count(select known_glass_data(cid) from Integer cid);

/* The vectors in testdata.nt contain no class information - 
   import feature vectors only */

set unknown_glass_data() = read_ntuples("data/testdata.nt");

/* Get the test set size */
count(unknown_glass_data());

/**************************************/
/* Analyze and normalize data         */
/**************************************/

/* Get the smallest value of each attribute of all training value vectors: */

set :min = aggv(all_known_glass_data(), #'minagg');

/* Inspect minima of attribute values: */

:min; 

/* Get the range of the value vector attributes of all training 
   value vectors: */

set :range = aggv(all_known_glass_data(), #'maxagg') - :min;

/* Inspect the ranges of the attribute values: */

:range;

/* Inspect the unnormalized attribute value vectors for the training samples
   of glass with id 3, i.e. the samples of processed float glass from 
   vehicle windows: */

known_glass_data(3);

/* Compute min/max normalized value vectors for the training samples of
   glass with id 3 (./ is division per element): */

select (x - :min) ./ :range
  from Vector of Number x 
  where x in known_glass_data(3);

/* Problem: What happens if the range for some attribute is 0? 
   Solution hint: Use the built-in substitution function 
   substv(Object from, Object to, Vector v) -> Vector
   E.g. substv(2,3,{1,2,3}) returns {1,3,3}
*/

select (x - :min) ./ substv(0,1,:range)
  from Vector of Number x 
  where x in known_glass_data(3);

/* Store all normalized training data in table normalized_known_glass_data */

set normalized_known_glass_data(cid) = (x - :min) ./ substv(0,1,:range)
  from Number cid, Vector of Number x
  where x in known_glass_data(cid);

/* Inspect normalization of glass id 3: */

normalized_known_glass_data(3);

/* Normalize the unclassified data*/

set normalized_unknown_glass_data() = (x - :min) ./ substv(0,1,:range)
  from Vector of Number x
  where x in unknown_glass_data();

/* Inspect it. Note that first(b) returns first element in bag b: */

first(unknown_glass_data());

first(normalized_unknown_glass_data());

/*****************************************************************************
3. kNN MODEL GENERATION
******************************************************************************/

/* The temporary variable :k holds the model specific number of 
   nearest neighbours for each sample: */

set :k = 7;

/* Based on Leave-One-Out cross validation, the built-in function 
   invalid_classification_valuess(Number k, Function dfn, 
                                  Bag of (Number, Vector of Number)) cl
                                 -> (Number id, Vector of Number v) 
   returns pairs (id, v) of all invalid classifications stored in 
   classifications cl when using k neigbours and the 
   distance function dfn(): */

set :training_data = (select cid, v 
                        from Number cid, Vector of Number v
                       where v in known_glass_data(cid));

invalid_classification_values(:k, #'euclid', :training_data);

/* How many misclassifications was there in the sample? */

count(invalid_classification_values(:k, #'euclid', 
                                    :training_data));

/* Experiment with different values of :k to find the optimal :k 

	 Added by group1
	 set :kRange = (select i from Number i where i in iota(1,25));
	 select k, count(invalid_classification_values(k,#'euclid',:training_data)) from Number k where k in :kRange;
	 
	 set :training_data_norm = (select cid, v 
							from Number cid, Vector of Number v
						   where v in normalized_known_glass_data(cid));
						   
	 select k,count(invalid_classification_values(k,#'euclid',:training_data_norm)) from Number k where k in :kRange;
 

Questions:
  - What is the best k? 2
  - Will normalizing the data improve the classifier result in this case? yes, 
  - Is optimal k the same for normalized and unnormalized data? No, we got for the best value of k= 2 for unnormalized, and k=3,4 for  normalized
  - Explain how Leave-One-Out cross validation works. Hint: Use sourcecode()
  Source code work as follows:
  The set of all training data set is cm.Each feature vector ve is picked out from known_glass_data and send to invalid_classification_values with ve as 
  the vector to be classified and cm - ve as the training set. The result of the classification is compared with the known classid of ve and misclassifications are recorded.
  
  LOOCV can be explained as follows:
  Each feature vector is picked up from the training set and classified with rest of the training set using knn classifier.
  This is done for every feature vector in the training set and count of misclassification for each vector is finally summed up.
  
  - What is the advantage or disadvantage with this approach?
  It can be used when the training data size is not much. The advantage is that it uses maximum  possible data in training set thereby leading to a highly accurate k. Test sets are mutually exclusive and they every record in the set is used for testing.
  
   This method has very high time complexity which is a disadvantage. The time complexity of the order of n^3.
   Since each time test set has only one record the variance of estimated performance tends to be very high.
   
   Referred from Introduction to Data mining by Tan et. al.  P-187
  
  
  - Can you think of an alternative method for the partitioning?
  
  We can try hold out sampling where the test data set will have more elements.
  Random sub sampling can also be considered.
  
*/

/*  Added by Group 1 begins */

/* With un normalized training data*/
set :kRange = (select i from Number i where i in iota(1,25));

select k,(count(invalid_classification_values(k,#'euclid',:training_data))/163)*100 from Number k where k in :kRange;

/* (k,error) = {(1,41),(2,39)} */

/* k = 2 has  the least error */
/*  Added by Group 1 ends*/

set :k = 2;
set :training_data = (select k, v 
                        from Number k, Vector of Number v
                       where v in normalized_known_glass_data(k));
					   


/* How many misclassifications was there in the sample? */


count(invalid_classification_values(:k, #'euclid', 
                                    :training_data));

/* Added by group 1. With normalized training data*/
select k,(count(invalid_classification_values(k,#'euclid',:training_data))/163)*100 from Number k where k in :kRange;			


/*****************************************************************************
4. kNN CLASSIFICATION
******************************************************************************/

/* (k,error) = {(1,29),(2,38),(3,33),(4,33)} values*/

set :k = 1;
set classified_glass_data(id) = v
    from Number id, Vector of Number v
    where (id, v) in 
          knn_classify_values(normalized_unknown_glass_data(), :k, #'euclid',
			:training_data); 

/* Inspect the result: */

first(select id, v 
      from Number id, Vector v 
      where v in classified_glass_data(id));
	  
	  
/*****************************************************************************
5. kNN TUNING 
******************************************************************************/
/*Added by group 1*/

/*(a) Investigation with Normalization begins */
/** Euclidean distance is used**/
/*************Gaussian begins****************************/

/* Gaussian Normalisation procedure begins*/
set :subtract = aggv(all_known_glass_data(), #'avg');

:subtract;

set :divide = aggv(all_known_glass_data(), #'stdev');

:divide;

select (x - :subtract) ./ substv(0,1,:divide)
  from Vector of Number x 
  where x in known_glass_data(3);
  
 /* Store all normalized training data in table normalized_known_glass_data */

set normalized_known_glass_data(cid) = (x - :subtract) ./ substv(0,1,:divide)
  from Number cid, Vector of Number x
  where x in known_glass_data(cid);

/* Inspect normalization of glass id 3: */

normalized_known_glass_data(3);

/* Normalize the unclassified data*/

set normalized_unknown_glass_data() = (x - :subtract) ./ substv(0,1,:divide)
  from Vector of Number x
  where x in unknown_glass_data();


/* Inspect it. Note that first(b) returns first element in bag b: */

first(unknown_glass_data());

first(normalized_unknown_glass_data());

/* Gaussian Normalisation procedure ends*/
  
/* Model generation begins */

/*Training data from normalized data*/

set :training_data = (select k, v 
                        from Number k, Vector of Number v
                       where v in normalized_known_glass_data(k));


select k,(count(invalid_classification_values(k,#'euclid',:training_data))/163)*100 from Number k where k in :kRange;

/*(k, error%) = {(1,30),(2,31),(3,31),(4,31)} are the least*/


/* Model generation ends */  

/* Classification of unknown data begins*/
set :k = 1;
set classified_glass_data(id) = v
    from Number id, Vector of Number v
    where (id, v) in 
          knn_classify_values(normalized_unknown_glass_data(), :k, #'euclid',
			:training_data); 

/* Inspect the result: */

first(select id, v 
      from Number id, Vector v 
      where v in classified_glass_data(id));  

/* Classification of unknown data ends*/

/*************Gaussian ends****************************/

/** Min max normalization is done in the beginning so skipping it***/

/********* Max norm normalization investigation begins *********/

/***Computing Normalization parameters*****/
set :subtract = 0;

:subtract;

set :divide = aggv(all_known_glass_data(), #'maxnormagg');

:divide;

 /* Store all normalized training data in table normalized_known_glass_data */
 
set normalized_known_glass_data(cid) = (x - :subtract) ./ substv(0,1,:divide)
  from Number cid, Vector of Number x
  where x in known_glass_data(cid);
  
 /* Inspect normalization of glass id 3: */

normalized_known_glass_data(3);
  
/* Normalize the unclassified data*/

set normalized_unknown_glass_data() = (x - :subtract) ./ substv(0,1,:divide)
  from Vector of Number x
  where x in unknown_glass_data();

 
/* Inspect it. Note that first(b) returns first element in bag b: */

first(unknown_glass_data());

first(normalized_unknown_glass_data());

/********* Max norm normalization ends *********/

/* Model generation begins */

/*Training data from normalized data*/

set :training_data = (select k, v 
                        from Number k, Vector of Number v
                       where v in normalized_known_glass_data(k));


select k,(count(invalid_classification_values(k,#'euclid',:training_data))/163)*100 from Number k where k in :kRange;

/*(k, error%) = {(1,35),(2,36),(3,31),(4,39),(5,36),(6,39)} are the least*/

set :k = 3;

/* Model generation ends */  

/* Classification of unknown data begins*/

set classified_glass_data(id) = v
    from Number id, Vector of Number v
    where (id, v) in 
          knn_classify_values(normalized_unknown_glass_data(), :k, #'euclid',
			:training_data); 

/* Inspect the result: */

first(select id, v 
      from Number id, Vector v 
      where v in classified_glass_data(id));  

/* Classification of unknown data ends*/

/********* Max norm normalization investigation ends *********/

/** MinMax normalization gives the best classifir accuracy**/

/**Distance function investigation begins***/
/** MinMax normalization is used**/

/** Manhattan begins**/

/* Store all normalized training data in table normalized_known_glass_data */

set normalized_known_glass_data(cid) = (x - :min) ./ substv(0,1,:range)
  from Number cid, Vector of Number x
  where x in known_glass_data(cid);
  
 set normalized_unknown_glass_data() = (x - :min) ./ substv(0,1,:range)
  from Vector of Number x
  where x in unknown_glass_data();

/** Model geenration begins**/  
set :training_data = (select cid, v 
                        from Number cid, Vector of Number v
                       where v in known_glass_data(cid));
					   
select k,(count(invalid_classification_values(k,#'manhattan',:training_data))/163)*100 from Number k where k in :kRange;

/** (k,error) = {(1,34),(2,39),(3,46),(4,44)}**/

/** Model geenration ends**//* Classification of unknown data begins*/
set :k = 1;
set classified_glass_data(id) = v
    from Number id, Vector of Number v
    where (id, v) in 
          knn_classify_values(normalized_unknown_glass_data(), :k, #'manhattan',
			:training_data); 

/* Inspect the result: */

first(select id, v 
      from Number id, Vector v 
      where v in classified_glass_data(id));  

/* Classification of unknown data ends*/


					   
/**Manhattan ends**/

/** Euclid distance function with minmax normalization is done earlier**/

/**Maxnorm distance fn investigation begins **/

/* Store all normalized training data in table normalized_known_glass_data */

set normalized_known_glass_data(cid) = (x - :min) ./ substv(0,1,:range)
  from Number cid, Vector of Number x
  where x in known_glass_data(cid);
  
 set normalized_unknown_glass_data() = (x - :min) ./ substv(0,1,:range)
  from Vector of Number x
  where x in unknown_glass_data();

/** Model geenration begins**/  
set :training_data = (select cid, v 
                        from Number cid, Vector of Number v
                       where v in known_glass_data(cid));
					   
select k,(count(invalid_classification_values(k,#'maxnorm',:training_data))/163)*100 from Number k where k in :kRange;

/** (k,error) = {(1,42),(2,42),(3,46),(4,49)}**/

/** Model geenration ends**//* Classification of unknown data begins*/
set :k = 1;
set classified_glass_data(id) = v
    from Number id, Vector of Number v
    where (id, v) in 
          knn_classify_values(normalized_unknown_glass_data(), :k, #'maxnorm',
			:training_data); 

/* Inspect the result: */

first(select id, v 
      from Number id, Vector v 
      where v in classified_glass_data(id));  

/* Classification of unknown data ends*/

/**Maxnorm distance fn investigation ends **/
